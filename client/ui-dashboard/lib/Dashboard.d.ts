import { IDashboard } from "./IDashboard";
import { IDashboardList } from "./IDashboardList";
import { IComponent } from "./IComponent";
import { Component } from "./Component";
import { SyncModel } from "@twii/core/lib/common/model/SyncModel";
declare class Dashboard extends Component implements IDashboard {
    sync: SyncModel;
    private _title;
    private _closeDisabled;
    private _saveDelay;
    loader: () => Promise<any> | any;
    saver: (data: any) => Promise<any> | any;
    private _configSaveDisposer;
    private _component;
    private _drag;
    private _blockSource;
    private _portalRoot;
    constructor();
    private _onResize;
    readonly type: string;
    readonly dashboardList: IDashboardList;
    closeDisabled: boolean;
    setCloseDisabled(closeDisabled: boolean): void;
    readonly component: IComponent;
    setComponent(component: IComponent): void;
    drag: IComponent;
    setDrag(drag: IComponent): void;
    clearDrag(): void;
    blockSource: IComponent;
    setBlockSource(blockSource: IComponent): void;
    clearBlockSource(): void;
    title: string;
    setTitle(title: string): void;
    readonly dashboard: this;
    componentConfig: any;
    setComponentConfig(config: any): Promise<any>;
    readonly config: {
        type: string;
        title: string;
        closeDisabled: boolean;
        component: any;
    };
    setConfig(value: any): Promise<void>;
    remove(comp: IComponent): void;
    replace(newComp: IComponent, oldComp: IComponent): void;
    private _saveConfig;
    saveDelay: number;
    private _loadDone;
    private _loadError;
    load(): Promise<any>;
    clear(): void;
    readonly isStackLayout: boolean;
    readonly isListLayout: boolean;
    readonly stackLayoutAvailable: boolean;
    private _stackLayoutImpl;
    stackLayout(): Promise<any>;
    readonly listLayoutAvailable: boolean;
    private _listLayoutImpl;
    listLayout(): Promise<any>;
    readonly isRowSplitLayout: boolean;
    readonly isColumnSplitLayout: boolean;
    readonly columnCount: any;
    readonly isTwoColumnSplitLayout: boolean;
    readonly twoColumnSplitLayoutAvailable: boolean;
    private _columnSplitLayout;
    private _twoColumnSplitlayoutImpl;
    twoColumnSplitLayout(): Promise<any>;
    readonly isThreeColumnSplitLayout: boolean;
    readonly threeColumnSplitLayoutAvailable: boolean;
    private _threeColumnSplitlayoutImpl;
    threeColumnSplitLayout(): Promise<any>;
    readonly isOtherLayout: boolean;
    readonly splittable: boolean;
    splitLeft(newComp?: IComponent): Promise<any>;
    splitRight(newComp?: IComponent): Promise<any>;
    splitTop(newComp: IComponent): Promise<any>;
    splitBottom(newComp: IComponent): Promise<any>;
    protected _visitChildren(callback: any): void;
    protected _findFirstChild(predicate: any): IComponent;
    protected _findAllChildren(predicate: any): IComponent[];
    unmount(): void;
    portalRoot: HTMLElement;
    private _getPortalId(source);
    getPortal(source: IComponent): HTMLElement;
    destroyPortal(source: IComponent): void;
}
export { Dashboard };
