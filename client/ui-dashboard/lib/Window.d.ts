import { IWindow } from "./IWindow";
import { IWindowManager } from "./IWindowManager";
import { IRequest } from "roota/lib/IRequest";
import { Component } from "./Component";
import { WindowAppHost } from "./WindowAppHost";
import { IConsumerFunc } from "@twii/core/lib/common/IConsumerFunc";
declare class Window extends Component implements IWindow {
    name: string;
    onClose: IConsumerFunc<IWindow>;
    private _path;
    private _params;
    private _query;
    private _appHost;
    private _contentHidden;
    private _closeDisabled;
    constructor();
    private _onResizeInternal;
    readonly appHost: WindowAppHost;
    path: string;
    setPath(path: string): void;
    params: any;
    setParams(params: any): void;
    query: any;
    setQuery(query: any): void;
    title: string;
    setTitle(title: string): void;
    closeDisabled: boolean;
    contentHidden: boolean;
    setContentHidden(contentHidden: boolean): void;
    toggleContent(): void;
    setCloseDisabled(closeDisabled: boolean): void;
    readonly manager: IWindowManager;
    readonly type: string;
    readonly active: any;
    activate(): void;
    readonly config: {
        type: string;
        path: string;
        params: any;
        query: any;
        closeDisabled: boolean;
        contentHidden: boolean;
    };
    setConfig(config: any): Promise<void>;
    open(request: IRequest): Promise<IWindow>;
    load(request: IRequest): Promise<any>;
    close(): void;
    readonly portal: HTMLElement;
}
export { Window };
